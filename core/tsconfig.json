{
  "compilerOptions": {
    /* Basic Options */
    "target": "es5", /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */
    "module": "amd", /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": [
      "es5",
      "dom",
      "es2015.promise",
      "es2015.iterable"
    ], /* Specify library files to be included in the compilation. */
    // "allowJs": true,                       /* Allow javascript files to be compiled. */
    // "checkJs": true,                       /* Report errors in .js files. */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    "declaration": true, /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    "sourceMap": false, /* Generates corresponding '.map' file. */
    "outFile": "./dou3d.js", /* Concatenate and emit output to single file. */
    // "outDir": "./",                        /* Redirect output structure to the directory. */
    // "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */s
    // "composite": true,                     /* Enable project compilation */
    // "removeComments": true,                /* Do not emit comments to output. */
    // "noEmit": true,                        /* Do not emit outputs. */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    /* Strict Type-Checking Options */
    // "strict": true,                        /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */
    /* Additional Checks */
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */
    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true, /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */
    /* Experimental Options */
    "experimentalDecorators": true, /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
  },
  "include": [
    "lib/compile.d.ts",
    "lib/dou.d.ts"
  ],
  /* 注: 如果有继承关系的, 父类必须排在子类前面 */
  "files": [
    "src/utils/Reference.ts",

    "src/core/context/Context3DProxy.ts",
    "src/core/context/ContextTexture2D.ts",
    "src/core/context/ContextTexture3D.ts",
    "src/core/context/FrameBuffer.ts",
    "src/core/context/IndexBuffer3D.ts",
    "src/core/context/MipmapData.ts",
    "src/core/context/Program3D.ts",
    "src/core/context/Shader.ts",
    "src/core/context/VertexBuffer3D.ts",

    "src/core/node/Object3D.ts",

    "src/render/RenderBase.ts",

    "src/core/node/ObjectContainer3D.ts",
    "src/core/node/Mesh.ts",
    "src/core/node/Billboard.ts",
    "src/core/node/Wireframe.ts",
    "src/core/node/SkyBox.ts",

    "src/core/traverse/CollectBase.ts",
    "src/core/traverse/EntityCollect.ts",
    "src/core/traverse/Layer.ts",

    "src/core/Ticker.ts",
    "src/core/View3D.ts",

    "src/animation/IAnimation.ts",
    "src/animation/IAnimationState.ts",
    "src/animation/skeleton/Joint.ts",
    "src/animation/skeleton/Skeleton.ts",
    "src/animation/skeleton/SkeletonAnimation.ts",
    "src/animation/skeleton/SkeletonAnimationClip.ts",
    "src/animation/skeleton/SkeletonAnimationState.ts",
    "src/animation/skeleton/SkeletonPose.ts",

    "src/camera/Camera3D.ts",

    "src/controllers/ControllerBase.ts",
    "src/controllers/LookAtController.ts",
    "src/controllers/HoverController.ts",

    "src/enum/BlendMode.ts",
    "src/enum/CameraType.ts",
    "src/enum/InternalFormat.ts",
    "src/enum/ContextSamplerType.ts",
    "src/enum/FrameBufferType.ts",
    "src/enum/FrameBufferFormat.ts",
    "src/enum/ShaderType.ts",
    "src/enum/VertexFormat.ts",
    "src/enum/LightType.ts",
    "src/enum/PassType.ts",
    "src/enum/ShaderPhaseType.ts",

    "src/event/Event3D.ts",

    "src/gemo/EulerOrder.ts",
    "src/gemo/Vector2.ts",
    "src/gemo/Vector3.ts",
    "src/gemo/Vector4.ts",
    "src/gemo/Quaternion.ts",
    "src/gemo/Matrix3.ts",
    "src/gemo/Matrix4.ts",
    "src/gemo/Rectangle.ts",
    "src/gemo/Plane.ts",
    "src/gemo/Ray.ts",
    "src/gemo/IRaycast.ts",
    "src/gemo/RaycastInfo.ts",
    "src/gemo/Color.ts",
    "src/gemo/ColorTransform.ts",
    "src/gemo/Curve3.ts",

    "src/geometry/Geometry.ts",
    "src/geometry/SubGeometry.ts",
    "src/geometry/CubeGeometry.ts",
    "src/geometry/CylinderGeometry.ts",
    "src/geometry/PlaneGeometry.ts",
    "src/geometry/SphereGeometry.ts",
    "src/geometry/GeometryCreator.ts",

    "src/lights/LightBase.ts",
    "src/lights/DirectLight.ts",
    "src/lights/PointLight.ts",
    "src/lights/SpotLight.ts",
    "src/lights/LightGroup.ts",

    "src/load/analyzer/TextureAnalyzer.ts",
    "src/load/analyzer/ESMAnalzyer.ts",
    "src/load/analyzer/EAMAnalzyer.ts",

    "src/material/supports/MaterialData.ts",
    "src/material/supports/MaterialBase.ts",
    "src/material/supports/MaterialPass.ts",
    "src/material/supports/PassUsage.ts",
    "src/material/supports/PassUtil.ts",
    "src/material/supports/MethodData.ts",
    "src/material/supports/MethodBase.ts",

    "src/material/method/ColorMethod.ts",
    "src/material/method/ShadowMethod.ts",
    "src/material/method/CubeMethod.ts",

    "src/material/pass/DiffusePass.ts",
    "src/material/pass/ShadowPass.ts",

    "src/material/ColorMaterial.ts",
    "src/material/TextureMaterial.ts",
    "src/material/CubeTextureMaterial.ts",

    "src/render/RendererBase.ts",
    "src/render/MultiRenderer.ts",

    "src/scene/Scene3D.ts",

    "src/shader/register/VarRegister.ts",
    "src/shader/register/Attribute.ts",
    "src/shader/register/ConstVar.ts",
    "src/shader/register/DefineVar.ts",
    "src/shader/register/Extension.ts",
    "src/shader/register/Sampler2D.ts",
    "src/shader/register/Sampler3D.ts",
    "src/shader/register/TmpVar.ts",
    "src/shader/register/Uniform.ts",
    "src/shader/register/Varying.ts",
    "src/shader/ShaderComposer.ts",
    "src/shader/ShaderContent.ts",
    "src/shader/ShaderPool.ts",
    "src/shader/ShaderLib.ts",
    "src/shader/ShaderUtil.ts",

    "src/shadow/ShadowCast.ts",

    "src/texture/TextureBase.ts",
    "src/texture/ImageTexture.ts",
    "src/texture/Texture.ts",
    "src/texture/CubeTexture.ts",
    "src/texture/RenderTexture.ts",
    "src/texture/CheckerboardTexture.ts",

    "src/utils/MathUtil.ts",
    "src/utils/GeometryUtil.ts",

    "src/Engine.ts",
  ]
}